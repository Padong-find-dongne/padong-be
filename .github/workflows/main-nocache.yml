name: Build and Deploy to EC2 (No Cache)

on:
  workflow_dispatch:  # 수동 실행 전용

jobs:
  build:
    name: Build without cache
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: Start Gradle build timer
        run: echo "BUILD_START=$(date +%s)" >> $GITHUB_ENV

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Show build duration
        run: |
          END=$(date +%s)
          echo "⏱️ Gradle Build: $((END - BUILD_START))s"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image (no cache)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/padong:latest

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Execute remote SSH commands on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            REGION="ap-northeast-2"
            ECR_REPOSITORY="padong"
            IMAGE_TAG="latest"
            AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}

            docker stop padong || true
            docker rm padong || true

            aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com
            docker pull $AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

            docker run -d --name padong -p 8080:8080 \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e RDS_URL=${{ secrets.RDS_URL }} \
              -e RDS_USERNAME=${{ secrets.RDS_USERNAME }} \
              -e RDS_PASSWORD=${{ secrets.RDS_PASSWORD }} \
              $AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
